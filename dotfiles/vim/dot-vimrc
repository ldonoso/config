let mapleader=" "

call plug#begin('~/.vim/bundle')

Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_switch_buffer = 'et'
if executable('ag')
    " Use ag in CtrlP for listing files
    let g:ctrlp_user_command = 'ag --literal --files-with-matches --nocolor --hidden -g "" %s'
endif

Plug 'flazz/vim-colorschemes'
Plug 'godlygeek/tabular'
Plug 'idanarye/vim-merginal'
Plug 'ivanov/vim-ipython'
Plug 'majutsushi/tagbar'  " requires universal ctags
autocmd FileType tagbar setlocal nocursorline nocursorcolumn  " for tagbar slowness

if has('nvim')
    Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
endif

Plug 'mileszs/ack.vim'
if executable('ag')  " Use silver searcher when available
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " --skip-vcs-ignores
    let g:ackprg = 'ag --vimgrep'

    " Search selected text
    vnoremap <leader>s y:Ack! -Q -i '<C-R>"'<CR>
endif

Plug 'nelstrom/vim-visual-star-search'

Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
nnoremap <leader>gs :Git<CR><C-w>20_
nnoremap <leader>gd :Gdiff!<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gb :Git blame<CR>

Plug 'tpope/vim-rhubarb'  " GBrowse github
Plug 'tommcdo/vim-fubitive'  " GBrowse bitbucket
Plug 'junegunn/gv.vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-sleuth'
Plug 'ujihisa/tabpagecolorscheme'
Plug 'will133/vim-dirdiff'

Plug 'AndrewRadev/linediff.vim'
let g:linediff_first_buffer_command  = 'leftabove new'
let g:linediff_further_buffer_command = 'rightbelow vertical new'
" line diff between two diff markers
nmap <silent> <leader>ld jV]nk:Linediff<CR>]njV]nk:Linediff<CR>

Plug 'vim-syntastic/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" active: checks whenever a buffer is saved or initially opened, passive: checks when the user calls :SyntasticCheck.
" In passive mode, checks are still done for filetypes in "active_filetypes" (and "passive_filetypes" is ignored).
" In active mode, checks are not done for any filetypes in "passive_filetypes" ("active_filetypes" is ignored).
" let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [], 'passive_filetypes': [] }  " disable all
let g:syntastic_mode_map = { 'mode': 'passive', 'passive_filetypes': ['markdown'] }

Plug 'davidhalter/jedi-vim', { 'for': 'python' }

Plug 'lyuts/vim-rtags'
let g:rtagsUseLocationList = 0  " Use QuickList

Plug 'christoomey/vim-tmux-navigator' 
tnoremap <silent> <C-h> <C-W>:TmuxNavigateLeft<CR>
tnoremap <silent> <C-j> <C-W>:TmuxNavigateDown<CR>
tnoremap <silent> <C-k> <C-W>:TmuxNavigateUp<CR>
tnoremap <silent> <C-l> <C-W>:TmuxNavigateRight<CR>

Plug 'vim-airline/vim-airline'
let g:airline#extensions#tagbar#enabled = 1

Plug 'editorconfig/editorconfig-vim'
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

Plug 'lfv89/vim-interestingwords'
" Also used in term mode if supported
let g:interestingWordsGUIColors = ['#8CCBEA', '#A4E57E', '#FFDB72', '#FF7272', '#FFB3FF', '#9999FF']

call plug#end()

" :set directory=~/.vim/swapfiles//
set autoread
set hidden  " switch between buffers without saving

" general encoding settings
set encoding=utf-8
set fileformats=unix,dos " new files will be encoded using unix line termination.
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab

set modeline  " read vim modelines
syntax on
au BufRead,BufNewFile *.make setfiletype make  " only if filetype has not already been set
au BufRead,BufNewFile *.sql set filetype=sqlinformix  " overrides any filetype that has already been set

set number " current line shows the global number
set relativenumber
set wildmode=longest,list
set mouse=  " disable mouse
set cursorline  " highlight current line
set belloff=all
set wildignore=*.o,*.obj,*.swp
let g:netrw_hide=1  " not show hidden files
let g:netrw_list_hide='.*\.swp$'
let g:netrw_preview=1  " Make vertical splitting the default for previewing files
"let g:netrw_liststyle=3  " Make the default listing style "tree"
let g:netrw_winsize=30  " When a vertical preview window is opened, the directory listing will use only 30%
set wrap linebreak  " break at a word boundary.

set laststatus=3  " when the last window will have a status line. 3: always and ONLY the last window

set incsearch hlsearch wrapscan ignorecase smartcase " search configuration
set shortmess-=S  " show number of occurrences

if has("gui_running")
    set guioptions-=m  " Remove menu bar
    set guioptions-=T  " Remove toolbar
    set guifont=Consolas:h11
endif

set colorcolumn=100
set background=dark
set termguicolors  " enables 24-bit RGB color in the TUI
colorscheme gruvbox

" tags. One tag file per directory and a general one
" in the working directory with the non-static definitions
set tags=./.tags,.tags  " Look for tags in current dir and in working dir
" set tags=./.tags;  " Look for tags file dir upwards

" Build the tag file in the dir of the current file
nnoremap ,t :!(cd %:p:h; ctags -f .tags *)&

" Windows
set splitbelow  " split will put the new window below of the current one
set splitright  " vsplit will put the new window right of the current one

" Center the display line after searches. http://www.vim.org/tips/tip.php?tip_id=528
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz
nnoremap * *``

" Enter command mode with one keystroke
nnoremap ; :
nnoremap : ;

set clipboard=unnamedplus  " use the clipboard (instead of the '+' and/or '*' registers)

nnoremap <leader>cfn :let @+=join([expand('%'),  line(".")], ':')<CR>
set backspace=indent,eol,start  " backspace behave like you expect and go through everything

nnoremap <leader>tc :tabclose<CR>
nnoremap <silent> <C-W>T :tab split<CR>

" line highlight
nnoremap <silent> <leader>l :call matchadd('Search', '\%'.line('.').'l')<CR>
nnoremap <silent> <leader>c :nohlsearch<CR>:call clearmatches()<CR>

set diffopt+=vertical,indent-heuristic,algorithm:histogram

" open a quickfix item in a new window
autocmd! FileType qf nnoremap <buffer> <leader><Enter> <C-w><Enter><C-w>L

" automatically jump to end of text you pasted
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" calculator
nnoremap Q 0yt=A<C-r>=<C-r>"<CR><Esc>

" Run command under cursor in terminal below
nnoremap <leader>r ^y$<C-W>b<C-W>""<CR><C-W>pj

" folding
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2
let g:xml_syntax_folding=1
autocmd FileType xml set foldmethod=syntax
autocmd FileType git set foldmethod=syntax

" clang format
noremap <leader>cf :py3f /usr/share/clang/clang-format-10/clang-format.py<cr>
let g:clang_format_fallback_style = 'none'

" termdebug
if !has('win32')
    " https://gavinhoward.com/2020/12/my-development-environment-and-how-i-got-there/
    packadd termdebug
    let g:termdebug_wide = 1
    nnoremap <F5> :Continue<CR>
    nnoremap <F1> :Over<CR>
    nnoremap <F2> :Step<CR>
    nnoremap <S-F2> :Finish<CR>
endif

" last-position-jump
autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

set makeprg=cmake

" Set the filetype based on the file's extension, but only if
" 'filetype' has not already been set
au BufRead,BufNewFile *.ic setfiletype cpp

" markdown
let g:markdown_folding = 1
let g:markdown_fenced_languages = ['html', 'python', 'haskell', 'cpp', 'c', 'sql']
let g:markdown_syntax_conceal = 0
