set nocompatible              " be iMproved, required
filetype off                  " required by bundle. Just temporally

" set the runtime path to include Vundle and initialize
" Note we use slashes so it works in mingw64, git, and windows
set rtp+=~/.vim/bundle/Vundle.vim
" Pass a path where Vundle should install plugins
call vundle#begin()

Plugin 'gmarik/Vundle.vim'  " let Vundle manage Vundle, required
Plugin 'christoomey/vim-tmux-navigator' 
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'godlygeek/tabular'
Plugin 'idanarye/vim-merginal'
Plugin 'ivanov/vim-ipython'
Plugin 'majutsushi/tagbar'
Plugin 'mileszs/ack.vim'
Plugin 'nelstrom/vim-markdown-folding' 
Plugin 'nelstrom/vim-visual-star-search'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-vinegar'
Plugin 'ujihisa/tabpagecolorscheme'
Plugin 'vim-scripts/BufOnly.vim'
Plugin 'vim-scripts/a.vim'
Plugin 'Valloric/YouCompleteMe'

if has('python') || has('python3')
    Plugin 'davidhalter/jedi-vim'
endif

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" :set directory=~/.vim/swapfiles//
:set autoread

" Encoding stuff
set encoding=utf-8
set fileformats=unix,dos " New files will be encoded using unix line termination.

set tabstop=4 shiftwidth=4 softtabstop=4 expandtab   
syntax on
set number " So in the current line we see the global number instead of the relative one
set relativenumber
set wildmode=longest,list
set mouse=a
set cursorline
if exists('belloff')
    set belloff=all
endif

" Search stuff
set incsearch hlsearch
set ignorecase smartcase
" conflicts with tmux navigator
" nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

if has("gui_running")
    set guioptions -=T
    set guifont=Consolas:h10
endif

set colorcolumn=100
set background=dark

" enable degraded color mode. Needed if you do not apply solarized colors to your terminal emu
let g:solarized_termcolors=256
let g:solarized_diffmode="high"
colorscheme solarized

set hidden

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tags. One tag file per directory and a general one
" in the working directory with the non-static definitions
"
set tags=./.tags,.tags  " Look for tags in current dir and in working dir
" set tags=./.tags;  " Look for tags file dir upwards

" Build the tag file in the dir of the current file
nnoremap ,t :!(cd %:p:h; ctags -f .tags *)&

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Windows
set splitright
set splitbelow

" so airline is shown in just one window
set laststatus=2

" Center the display line after searches. (This makes it *much* easier to see the matched line.)
" More info: http://www.vim.org/tips/tip.php?tip_id=528
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Enter command mode with one keystroke
nnoremap ; :
nnoremap : ;

set diffopt+=iwhite
set diffopt+=vertical

" function to use -w instead of -b when iwhite is set
set diffexpr=DiffW()
function! DiffW()
	let opt = ""
	if &diffopt =~ "icase"
		let opt = opt . "-i "
endif
	if &diffopt =~ "iwhite"
		let opt = opt . "-w " " vim uses -b by default
	endif
	silent execute "!diff -a --binary " . opt .
				\ v:fname_in . " " . v:fname_new .  " > " . v:fname_out
endfunction

" tagbar slowness
autocmd FileType tagbar setlocal nocursorline nocursorcolumn

" Use silver searcher when available
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" md files are markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Open a quickfix item in a new window
autocmd! FileType qf nnoremap <buffer> <leader><Enter> <C-w><Enter><C-w>L


" Automatically jump to end of text you pasted
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Highlight of pieces of code
" http://vim.wikia.com/wiki/Different_syntax_highlighting_within_regions_of_a_file
"
" To enable:
" :call TextEnableCodeSnip('python', '@begin=python@', '@end=python@', 'SpecialComment')
" :call TextEnableCodeSnip('python', '^    \ze\(\a\|>\)', '^\ze\w', 'SpecialComment')
"
" If highlighting gets out of sync
" :syn sync fromstart
function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
  let ft=toupper(a:filetype)
  let group='textGroup'.ft
  if exists('b:current_syntax')
    let s:current_syntax=b:current_syntax
    " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
    " do nothing if b:current_syntax is defined.
    unlet b:current_syntax
  endif
  execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
  try
    execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
  catch
  endtry
  if exists('s:current_syntax')
    let b:current_syntax=s:current_syntax
  else
    unlet b:current_syntax
  endif
  execute 'syntax region textSnip'.ft.'
  \ matchgroup='.a:textSnipHl.'
  \ start="'.a:start.'" end="'.a:end.'"
  \ contains=@'.group
endfunction

" fugitive git bindings
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>ga :Gcommit --amend<CR>
nnoremap <leader>gt :Gcommit -v -q %<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gl :silent! Glog<CR>
nnoremap <leader>gp :Ggrep<Space>
nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gps :Dispatch! git push<CR>
nnoremap <leader>gpl :Dispatch! git pull<CR>

" XML folding
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax
